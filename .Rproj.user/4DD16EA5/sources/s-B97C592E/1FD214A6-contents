library(shiny)
library(miniUI)



promptSample <- function() {

  ui <- miniPage(

    # See utils.R
    includeHighlightJs(),

    # Test inline css embed first
    tags$head(
      tags$style(
        HTML("

             h4{
              font-weight: bold;
             }
             .btn2 {
                background-color: #75aadb;
             }
             .btn2:hover {
                background-color: #75aadb;
                opacity: 0.7;
             }

             ")
      )),

    # UI container
    miniContentPanel(
      # Prompt for num cylinders
      div(id="test",
      HTML("<h4>Enter the desired number of cylinders.</h4>"),
      stableColumnLayout(textInput("cylinders", "Cylinders")),
      HTML("<button id = 'done'
           type = 'button'
           class = 'btn2 btn btn-default action-button shiny-bound-input'>
           Done</button>"),
      )
      # actionButton("done", "Done")
    )
  )

  server <- function(input, output, session) {

    # Checks observe and matches input with done button
    observeEvent(input$done, {
      cyl <- as.integer(input$cylinders)
      # Check if input is a number
      if(is.na(cyl)) {

        # Insert disappearing error message if non-int input
        insertUI(selector = "#test",
                 where = "afterEnd",
                 ui = HTML("<button id = 'okerr'
                           type = 'button'
                           class = 'btn2 btn btn-default action-button shiny-bound-input'>
                             Okay
                           </button>"))
        insertUI(selector = "#okerr",
               where = "beforeBegin",
               ui = div(id="errmsg", h4("Error: invalid number of cylinders.")))
      }

      else {

        # Read & copy entire file
        path <- getwd()
        path <- paste(path, "/R/SampleReportProgram2.R", sep="")
        fileText <- readLines(path)

        # Replace variable values of cylinder in src code
        fileText <- gsub("cyl == .", paste("cyl == ", cyl), fileText)

        # Create temporary directory if doesn't exist
        dir <- tempdir()
        if (!dir.exists(dir))
          dir.create(dir)

        # Else cleanup directory
        else {
          ls <- list.files(
            dir,
            full.names = TRUE,
            pattern = "file_....-..-.._........_temp.R")
          unlink(ls, recursive = TRUE)
        }



        # Create a filename based on date/time
        timeSave <- toString(Sys.time())

        dateSplit1 <- strsplit(timeSave, " ")
        date <- dateSplit1[[1]][1]
        time <- dateSplit1[[1]][2]
        time <- gsub(":", ".", time)

        customName <- paste(sep="" ,"file_", date, "_", time, "_temp.R")
        customName <- paste(sep="/", tempdir(), customName)

        # Add the modified text into file in temp directory
        file.create(customName)
        writeLines(fileText, customName, sep = "\n")

        # Run modified program
        source(customName)

        stopApp()
      }
    })

    # match event with error button and delete messages
    observeEvent(input$okerr, {
      removeUI(selector = "#errmsg")
      removeUI(selector = "#okerr")
    })
  }

  # determine viewer size
  viewer <- dialogViewer("Enter Number of Cylinders", width = 1000, height = 200)
  runGadget(ui, server, viewer = viewer)
}
